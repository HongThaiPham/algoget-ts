/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner, modelsv2 } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address,address,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "set_event_result(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "optInToApplication()void": {
      "call_config": {
        "opt_in": "CALL"
      }
    },
    "bet(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "payout()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "chosenOpt": {
          "type": "uint64",
          "key": "chosenOpt"
        },
        "hasPlacedBet": {
          "type": "bytes",
          "key": "hasPlacedBet"
        },
        "hasRequestedPayout": {
          "type": "bytes",
          "key": "hasRequestedPayout"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager"
        },
        "oracleAddr": {
          "type": "bytes",
          "key": "oracleAddr"
        },
        "eventResult": {
          "type": "uint64",
          "key": "eventResult"
        },
        "betAmount": {
          "type": "uint64",
          "key": "betAmount"
        },
        "counterOpt0": {
          "type": "uint64",
          "key": "counterOpt0"
        },
        "counterOpt1": {
          "type": "uint64",
          "key": "counterOpt1"
        },
        "counterOpt2": {
          "type": "uint64",
          "key": "counterOpt2"
        },
        "stakeAmount": {
          "type": "uint64",
          "key": "stakeAmount"
        },
        "winningCount": {
          "type": "uint64",
          "key": "winningCount"
        },
        "winningPayout": {
          "type": "uint64",
          "key": "winningPayout"
        },
        "eventStartTimestamp": {
          "type": "uint64",
          "key": "eventStartTimestamp"
        },
        "eventEndTimestamp": {
          "type": "uint64",
          "key": "eventEndTimestamp"
        },
        "payoutTimeWindowS": {
          "type": "uint64",
          "key": "payoutTimeWindowS"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 11
    },
    "local": {
      "num_byte_slices": 2,
      "num_uints": 1
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "AlgobetTs",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "managerAddr",
            "type": "address",
            "desc": ""
          },
          {
            "name": "oracleAddr",
            "type": "address",
            "desc": ""
          },
          {
            "name": "eventStartUnixTimestamp",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "eventEndUnixTimestamp",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "payoutTimeWindowS",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "set_event_result",
        "args": [
          {
            "name": "opt",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "optInToApplication",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "bet",
        "args": [
          {
            "name": "opt",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "betDepositTx",
            "type": "pay",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "payout",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the AlgobetTs smart contract.
 */
export type AlgobetTs = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address,uint64,uint64,uint64)void' | 'createApplication', {
      argsObj: {
        managerAddr: string
        oracleAddr: string
        eventStartUnixTimestamp: bigint | number
        eventEndUnixTimestamp: bigint | number
        payoutTimeWindowS: bigint | number
      }
      argsTuple: [managerAddr: string, oracleAddr: string, eventStartUnixTimestamp: bigint | number, eventEndUnixTimestamp: bigint | number, payoutTimeWindowS: bigint | number]
      returns: void
    }>
    & Record<'set_event_result(uint64)void' | 'set_event_result', {
      argsObj: {
        opt: bigint | number
      }
      argsTuple: [opt: bigint | number]
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'bet(uint64,pay)void' | 'bet', {
      argsObj: {
        opt: bigint | number
        betDepositTx: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [opt: bigint | number, betDepositTx: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'payout()void' | 'payout', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'manager'?: BinaryState
      'oracleAddr'?: BinaryState
      'eventResult'?: IntegerState
      'betAmount'?: IntegerState
      'counterOpt0'?: IntegerState
      'counterOpt1'?: IntegerState
      'counterOpt2'?: IntegerState
      'stakeAmount'?: IntegerState
      'winningCount'?: IntegerState
      'winningPayout'?: IntegerState
      'eventStartTimestamp'?: IntegerState
      'eventEndTimestamp'?: IntegerState
      'payoutTimeWindowS'?: IntegerState
    }
    local: {
      'chosenOpt'?: IntegerState
      'hasPlacedBet'?: BinaryState
      'hasRequestedPayout'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AlgobetTsSig = keyof AlgobetTs['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AlgobetTsSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the AlgobetTs smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AlgobetTsSig> = AlgobetTs['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AlgobetTs smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgobetTsSig> = AlgobetTs['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AlgobetTsCreateCalls = (typeof AlgobetTsCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AlgobetTsCreateCallParams =
  | (TypedCallParams<'createApplication(address,address,uint64,uint64,uint64)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type AlgobetTsDeleteCalls = (typeof AlgobetTsCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type AlgobetTsDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type AlgobetTsDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AlgobetTsCreateCalls) => AlgobetTsCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: AlgobetTsDeleteCalls) => AlgobetTsDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AlgobetTsCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AlgobetTs smart contract using the createApplication(address,address,uint64,uint64,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address,address,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address,address,uint64,uint64,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.managerAddr, args.oracleAddr, args.eventStartUnixTimestamp, args.eventEndUnixTimestamp, args.payoutTimeWindowS],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the AlgobetTs smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the AlgobetTs smart contract using the optInToApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'optInToApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_event_result(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setEventResult(args: MethodArgs<'set_event_result(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_event_result(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.opt],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bet(uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bet(args: MethodArgs<'bet(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bet(uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.opt, args.betDepositTx],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the payout()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static payout(args: MethodArgs<'payout()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'payout()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AlgobetTs smart contract
 */
export class AlgobetTsClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AlgobetTsClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AlgobetTs['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AlgobetTs smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AlgobetTsDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AlgobetTsCallFactory.create)
    const deleteArgs = params.deleteCall?.(AlgobetTsCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AlgobetTs smart contract using the createApplication(address,address,uint64,uint64,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(address,address,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(address,address,uint64,uint64,uint64)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(AlgobetTsCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the AlgobetTs smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'deleteApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.delete(AlgobetTsCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the AlgobetTs smart contract using the optInToApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result
       */
      async optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'optInToApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.optIn(AlgobetTsCallFactory.optIn.optInToApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AlgobetTs smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the set_event_result(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setEventResult(args: MethodArgs<'set_event_result(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgobetTsCallFactory.setEventResult(args, params))
  }

  /**
   * Calls the bet(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bet(args: MethodArgs<'bet(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgobetTsCallFactory.bet(args, params))
  }

  /**
   * Calls the payout()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public payout(args: MethodArgs<'payout()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgobetTsCallFactory.payout(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AlgobetTs['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get manager() {
        return AlgobetTsClient.getBinaryState(state, 'manager')
      },
      get oracleAddr() {
        return AlgobetTsClient.getBinaryState(state, 'oracleAddr')
      },
      get eventResult() {
        return AlgobetTsClient.getIntegerState(state, 'eventResult')
      },
      get betAmount() {
        return AlgobetTsClient.getIntegerState(state, 'betAmount')
      },
      get counterOpt0() {
        return AlgobetTsClient.getIntegerState(state, 'counterOpt0')
      },
      get counterOpt1() {
        return AlgobetTsClient.getIntegerState(state, 'counterOpt1')
      },
      get counterOpt2() {
        return AlgobetTsClient.getIntegerState(state, 'counterOpt2')
      },
      get stakeAmount() {
        return AlgobetTsClient.getIntegerState(state, 'stakeAmount')
      },
      get winningCount() {
        return AlgobetTsClient.getIntegerState(state, 'winningCount')
      },
      get winningPayout() {
        return AlgobetTsClient.getIntegerState(state, 'winningPayout')
      },
      get eventStartTimestamp() {
        return AlgobetTsClient.getIntegerState(state, 'eventStartTimestamp')
      },
      get eventEndTimestamp() {
        return AlgobetTsClient.getIntegerState(state, 'eventEndTimestamp')
      },
      get payoutTimeWindowS() {
        return AlgobetTsClient.getIntegerState(state, 'payoutTimeWindowS')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<AlgobetTs['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get chosenOpt() {
        return AlgobetTsClient.getIntegerState(state, 'chosenOpt')
      },
      get hasPlacedBet() {
        return AlgobetTsClient.getBinaryState(state, 'hasPlacedBet')
      },
      get hasRequestedPayout() {
        return AlgobetTsClient.getBinaryState(state, 'hasRequestedPayout')
      },
    }
  }

  public compose(): AlgobetTsComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setEventResult(args: MethodArgs<'set_event_result(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setEventResult(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      bet(args: MethodArgs<'bet(uint64,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bet(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      payout(args: MethodArgs<'payout()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.payout(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get optIn() {
        const $this = this
        return {
          optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientCallCoreParams) {
            promiseChain = promiseChain.then(() => client.optIn.optInToApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate() {
        await promiseChain
        const result = await atc.simulate(client.algod)
        return result
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AlgobetTsComposer
  }
}
export type AlgobetTsComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_event_result(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setEventResult(args: MethodArgs<'set_event_result(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgobetTsComposer<[...TReturns, MethodReturn<'set_event_result(uint64)void'>]>

  /**
   * Calls the bet(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bet(args: MethodArgs<'bet(uint64,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgobetTsComposer<[...TReturns, MethodReturn<'bet(uint64,pay)void'>]>

  /**
   * Calls the payout()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payout(args: MethodArgs<'payout()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgobetTsComposer<[...TReturns, MethodReturn<'payout()void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the AlgobetTs smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientCallCoreParams): AlgobetTsComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the AlgobetTs smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientCallCoreParams): AlgobetTsComposer<[...TReturns, MethodReturn<'optInToApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the AlgobetTs smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AlgobetTsComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AlgobetTsComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AlgobetTsComposerSimulateResult>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<AlgobetTsComposerResults<TReturns>>
}
export type AlgobetTsComposerSimulateResult = {
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AlgobetTsComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
