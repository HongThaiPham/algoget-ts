#pragma version 9

// This TEAL was generated by TEALScript v0.63.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp call_OptIn NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_DeleteApplication

NOT_IMPLEMENTED:
	err

// createApplication(uint64,uint64,uint64,address,address)void
abi_route_createApplication:
	// payoutTimeWindowS: uint64
	txna ApplicationArgs 5
	btoi

	// eventEndUnixTimestamp: uint64
	txna ApplicationArgs 4
	btoi

	// eventStartUnixTimestamp: uint64
	txna ApplicationArgs 3
	btoi

	// oracleAddr: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// managerAddr: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute createApplication(uint64,uint64,uint64,address,address)void
	callsub createApplication
	int 1
	return

createApplication:
	proto 5 0

	// contracts/algobet-ts.algo.ts:44
	// this.manager.value = managerAddr
	byte 0x6d616e61676572 // "manager"
	frame_dig -1 // managerAddr: address
	app_global_put

	// contracts/algobet-ts.algo.ts:45
	// this.oracleAddr.value = oracleAddr
	byte 0x6f7261636c6541646472 // "oracleAddr"
	frame_dig -2 // oracleAddr: address
	app_global_put

	// contracts/algobet-ts.algo.ts:47
	// assert(eventEndUnixTimestamp > globals.latestTimestamp)
	frame_dig -4 // eventEndUnixTimestamp: uint64
	global LatestTimestamp
	>
	assert

	// contracts/algobet-ts.algo.ts:48
	// assert(eventEndUnixTimestamp > eventStartUnixTimestamp)
	frame_dig -4 // eventEndUnixTimestamp: uint64
	frame_dig -3 // eventStartUnixTimestamp: uint64
	>
	assert

	// contracts/algobet-ts.algo.ts:49
	// this.eventResult.value = 99
	byte 0x6576656e74526573756c74 // "eventResult"
	int 99
	app_global_put

	// contracts/algobet-ts.algo.ts:50
	// this.betAmount.value = 1_400_000
	byte 0x626574416d6f756e74 // "betAmount"
	int 1_400_000
	app_global_put

	// contracts/algobet-ts.algo.ts:51
	// this.stakeAmount.value = 0
	byte 0x7374616b65416d6f756e74 // "stakeAmount"
	int 0
	app_global_put

	// contracts/algobet-ts.algo.ts:52
	// this.counterOpt0.value = 0
	byte 0x636f756e7465724f707430 // "counterOpt0"
	int 0
	app_global_put

	// contracts/algobet-ts.algo.ts:53
	// this.counterOpt1.value = 0
	byte 0x636f756e7465724f707431 // "counterOpt1"
	int 0
	app_global_put

	// contracts/algobet-ts.algo.ts:54
	// this.counterOpt2.value = 0
	byte 0x636f756e7465724f707432 // "counterOpt2"
	int 0
	app_global_put

	// contracts/algobet-ts.algo.ts:55
	// this.winningCount.value = 0
	byte 0x77696e6e696e67436f756e74 // "winningCount"
	int 0
	app_global_put

	// contracts/algobet-ts.algo.ts:56
	// this.eventStartTimestamp.value = eventStartUnixTimestamp
	byte 0x6576656e74537461727454696d657374616d70 // "eventStartTimestamp"
	frame_dig -3 // eventStartUnixTimestamp: uint64
	app_global_put

	// contracts/algobet-ts.algo.ts:57
	// this.eventEndTimestamp.value = eventEndUnixTimestamp
	byte 0x6576656e74456e6454696d657374616d70 // "eventEndTimestamp"
	frame_dig -4 // eventEndUnixTimestamp: uint64
	app_global_put

	// contracts/algobet-ts.algo.ts:58
	// this.payoutTimeWindowS.value = payoutTimeWindowS
	byte 0x7061796f757454696d6557696e646f7753 // "payoutTimeWindowS"
	frame_dig -5 // payoutTimeWindowS: uint64
	app_global_put
	retsub

// set_event_result(uint64)void
abi_route_set_event_result:
	// opt: uint64
	txna ApplicationArgs 1
	btoi

	// execute set_event_result(uint64)void
	callsub set_event_result
	int 1
	return

set_event_result:
	proto 1 0

	// contracts/algobet-ts.algo.ts:62
	// assert(this.txn.sender === this.oracleAddr.value)
	txn Sender
	byte 0x6f7261636c6541646472 // "oracleAddr"
	app_global_get
	==
	assert

	// if0_condition
	// contracts/algobet-ts.algo.ts:64
	// opt > 3
	frame_dig -1 // opt: uint64
	int 3
	>
	bz if0_end

	// if0_consequent
	err // 'Invalid option'

if0_end:
	// contracts/algobet-ts.algo.ts:67
	// this.eventResult.value = opt
	byte 0x6576656e74526573756c74 // "eventResult"
	frame_dig -1 // opt: uint64
	app_global_put

	// if1_condition
	// contracts/algobet-ts.algo.ts:68
	// opt === 0
	frame_dig -1 // opt: uint64
	int 0
	==
	bz if1_end

	// if1_consequent
	// contracts/algobet-ts.algo.ts:69
	// this.winningCount.value = this.counterOpt0.value
	byte 0x77696e6e696e67436f756e74 // "winningCount"
	byte 0x636f756e7465724f707430 // "counterOpt0"
	app_global_get
	app_global_put

if1_end:
	// if2_condition
	// contracts/algobet-ts.algo.ts:71
	// opt === 1
	frame_dig -1 // opt: uint64
	int 1
	==
	bz if2_end

	// if2_consequent
	// contracts/algobet-ts.algo.ts:72
	// this.winningCount.value = this.counterOpt1.value
	byte 0x77696e6e696e67436f756e74 // "winningCount"
	byte 0x636f756e7465724f707431 // "counterOpt1"
	app_global_get
	app_global_put

if2_end:
	// if3_condition
	// contracts/algobet-ts.algo.ts:74
	// opt === 2
	frame_dig -1 // opt: uint64
	int 2
	==
	bz if3_end

	// if3_consequent
	// contracts/algobet-ts.algo.ts:75
	// this.winningCount.value = this.counterOpt2.value
	byte 0x77696e6e696e67436f756e74 // "winningCount"
	byte 0x636f756e7465724f707432 // "counterOpt2"
	app_global_get
	app_global_put

if3_end:
	// if4_condition
	// contracts/algobet-ts.algo.ts:77
	// this.winningCount.value === 0
	byte 0x77696e6e696e67436f756e74 // "winningCount"
	app_global_get
	int 0
	==
	bz if4_else

	// if4_consequent
	// contracts/algobet-ts.algo.ts:78
	// this.winningPayout.value = this.stakeAmount.value - globals.minTxnFee
	byte 0x77696e6e696e675061796f7574 // "winningPayout"
	byte 0x7374616b65416d6f756e74 // "stakeAmount"
	app_global_get
	global MinTxnFee
	-
	app_global_put
	b if4_end

if4_else:
	// contracts/algobet-ts.algo.ts:80
	// this.winningPayout.value = this.stakeAmount.value / this.winningCount.value - globals.minTxnFee
	byte 0x77696e6e696e675061796f7574 // "winningPayout"
	byte 0x7374616b65416d6f756e74 // "stakeAmount"
	app_global_get
	byte 0x77696e6e696e67436f756e74 // "winningCount"
	app_global_get
	/
	global MinTxnFee
	-
	app_global_put

if4_end:
	retsub

// deleteApplication()void
abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

deleteApplication:
	proto 0 0

	// contracts/algobet-ts.algo.ts:85
	// assert(this.txn.sender === this.manager.value)
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	assert

	// contracts/algobet-ts.algo.ts:88
	// sendPayment({
	//       receiver: this.txn.sender,
	//       amount: 0,
	//       closeRemainderTo: this.txn.sender,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/algobet-ts.algo.ts:89
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/algobet-ts.algo.ts:90
	// amount: 0
	int 0
	itxn_field Amount

	// contracts/algobet-ts.algo.ts:91
	// closeRemainderTo: this.txn.sender
	txn Sender
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

setManager:
	proto 1 0

	// contracts/algobet-ts.algo.ts:96
	// this.manager.value = newManager
	byte 0x6d616e61676572 // "manager"
	frame_dig -1 // newManager: address
	app_global_put
	retsub

setOracle:
	proto 1 0

	// contracts/algobet-ts.algo.ts:100
	// this.oracleAddr.value = newOracle
	byte 0x6f7261636c6541646472 // "oracleAddr"
	frame_dig -1 // newOracle: address
	app_global_put
	retsub

setEventStartTimestamp:
	proto 1 0

	// contracts/algobet-ts.algo.ts:104
	// this.eventStartTimestamp.value = newEventStartTimestamp
	byte 0x6576656e74537461727454696d657374616d70 // "eventStartTimestamp"
	frame_dig -1 // newEventStartTimestamp: uint64
	app_global_put
	retsub

setEventEndTimestamp:
	proto 1 0

	// contracts/algobet-ts.algo.ts:108
	// this.eventEndTimestamp.value = newEventEndTimestamp
	byte 0x6576656e74456e6454696d657374616d70 // "eventEndTimestamp"
	frame_dig -1 // newEventEndTimestamp: uint64
	app_global_put
	retsub

setPayoutTimeWindowS:
	proto 1 0

	// contracts/algobet-ts.algo.ts:112
	// this.payoutTimeWindowS.value = newPayoutTimeWindowS
	byte 0x7061796f757454696d6557696e646f7753 // "payoutTimeWindowS"
	frame_dig -1 // newPayoutTimeWindowS: uint64
	app_global_put
	retsub

// optInToApplication()void
abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	int 1
	return

optInToApplication:
	proto 0 0

	// contracts/algobet-ts.algo.ts:116
	// this.hasPlacedBet(this.txn.sender).value = false
	txn Sender
	byte 0x686173506c61636564426574 // "hasPlacedBet"
	int 0
	byte 0x00
	int 0
	uncover 2
	setbit
	app_local_put

	// contracts/algobet-ts.algo.ts:117
	// this.hasRequestedPayout(this.txn.sender).value = false
	txn Sender
	byte 0x6861735265717565737465645061796f7574 // "hasRequestedPayout"
	int 0
	byte 0x00
	int 0
	uncover 2
	setbit
	app_local_put
	retsub

// bet(pay,uint64)void
abi_route_bet:
	// betDepositTx: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// opt: uint64
	txna ApplicationArgs 1
	btoi

	// execute bet(pay,uint64)void
	callsub bet
	int 1
	return

bet:
	proto 2 0

	// contracts/algobet-ts.algo.ts:121
	// verifyPayTxn(betDepositTx, {
	//       amount: this.betAmount.value,
	//       receiver: this.app.address,
	//     })
	// verify amount
	frame_dig -2 // betDepositTx: pay
	gtxns Amount
	byte 0x626574416d6f756e74 // "betAmount"
	app_global_get
	==
	assert

	// verify receiver
	frame_dig -2 // betDepositTx: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// contracts/algobet-ts.algo.ts:127
	// assert(this.hasPlacedBet(this.txn.sender).value === false)
	txn Sender
	byte 0x686173506c61636564426574 // "hasPlacedBet"
	app_local_get
	int 0
	getbit
	int 0
	==
	assert

	// if5_condition
	// contracts/algobet-ts.algo.ts:128
	// opt > 3
	frame_dig -1 // opt: uint64
	int 3
	>
	bz if5_end

	// if5_consequent
	err // 'Invalid option'

if5_end:
	// contracts/algobet-ts.algo.ts:131
	// this.chosenOpt(this.txn.sender).value = opt
	txn Sender
	byte 0x63686f73656e4f7074 // "chosenOpt"
	frame_dig -1 // opt: uint64
	app_local_put

	// if6_condition
	// contracts/algobet-ts.algo.ts:132
	// opt === 0
	frame_dig -1 // opt: uint64
	int 0
	==
	bz if6_end

	// if6_consequent
	// contracts/algobet-ts.algo.ts:133
	// this.counterOpt0.value = this.counterOpt0.value + 1
	byte 0x636f756e7465724f707430 // "counterOpt0"
	byte 0x636f756e7465724f707430 // "counterOpt0"
	app_global_get
	int 1
	+
	app_global_put

if6_end:
	// if7_condition
	// contracts/algobet-ts.algo.ts:135
	// opt === 1
	frame_dig -1 // opt: uint64
	int 1
	==
	bz if7_end

	// if7_consequent
	// contracts/algobet-ts.algo.ts:136
	// this.counterOpt1.value = this.counterOpt1.value + 1
	byte 0x636f756e7465724f707431 // "counterOpt1"
	byte 0x636f756e7465724f707431 // "counterOpt1"
	app_global_get
	int 1
	+
	app_global_put

if7_end:
	// if8_condition
	// contracts/algobet-ts.algo.ts:138
	// opt === 2
	frame_dig -1 // opt: uint64
	int 2
	==
	bz if8_end

	// if8_consequent
	// contracts/algobet-ts.algo.ts:139
	// this.counterOpt2.value = this.counterOpt2.value + 1
	byte 0x636f756e7465724f707432 // "counterOpt2"
	byte 0x636f756e7465724f707432 // "counterOpt2"
	app_global_get
	int 1
	+
	app_global_put

if8_end:
	// contracts/algobet-ts.algo.ts:141
	// this.hasPlacedBet(this.txn.sender).value = true
	txn Sender
	byte 0x686173506c61636564426574 // "hasPlacedBet"
	int 1
	byte 0x00
	int 0
	uncover 2
	setbit
	app_local_put

	// contracts/algobet-ts.algo.ts:142
	// this.stakeAmount.value = this.stakeAmount.value + this.betAmount.value
	byte 0x7374616b65416d6f756e74 // "stakeAmount"
	byte 0x7374616b65416d6f756e74 // "stakeAmount"
	app_global_get
	byte 0x626574416d6f756e74 // "betAmount"
	app_global_get
	+
	app_global_put
	retsub

// payout()void
abi_route_payout:
	// execute payout()void
	callsub payout
	int 1
	return

payout:
	proto 0 0

	// contracts/algobet-ts.algo.ts:146
	// assert(this.txn.sender.isOptedInToApp(this.app))
	txn Sender
	txna Applications 0
	app_opted_in
	assert

	// contracts/algobet-ts.algo.ts:147
	// assert(this.eventResult.value === this.chosenOpt(this.txn.sender).value)
	byte 0x6576656e74526573756c74 // "eventResult"
	app_global_get
	txn Sender
	byte 0x63686f73656e4f7074 // "chosenOpt"
	app_local_get
	==
	assert

	// contracts/algobet-ts.algo.ts:148
	// assert(this.hasRequestedPayout(this.txn.sender).value === false)
	txn Sender
	byte 0x6861735265717565737465645061796f7574 // "hasRequestedPayout"
	app_local_get
	int 0
	getbit
	int 0
	==
	assert

	// contracts/algobet-ts.algo.ts:149
	// this.hasRequestedPayout(this.txn.sender).value = true
	txn Sender
	byte 0x6861735265717565737465645061796f7574 // "hasRequestedPayout"
	int 1
	byte 0x00
	int 0
	uncover 2
	setbit
	app_local_put

	// contracts/algobet-ts.algo.ts:150
	// sendPayment({
	//       receiver: this.txn.sender,
	//       amount: this.winningPayout.value,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/algobet-ts.algo.ts:151
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/algobet-ts.algo.ts:152
	// amount: this.winningPayout.value
	byte 0x77696e6e696e675061796f7574 // "winningPayout"
	app_global_get
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

create_NoOp:
	method "createApplication(address,address,uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "set_event_result(uint64)void"
	method "bet(uint64,pay)void"
	method "payout()void"
	txna ApplicationArgs 0
	match abi_route_set_event_result abi_route_bet abi_route_payout
	err

call_OptIn:
	method "optInToApplication()void"
	txna ApplicationArgs 0
	match abi_route_optInToApplication
	err

call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match abi_route_deleteApplication
	err